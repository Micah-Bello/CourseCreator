@inject NavigationManager NavMan
@inject SimpleQuizDataService SimpleQuizData

<div class="m-2 p-2 shadow-sm">
    <div class="row" @onclick="ExpandCollapse">
        <label class="h4 m-2">@Section.Title</label>
        <div class="col text-right">
            <button class="btn btn-outline-primary m-2" @onclick="AddBlock">Add Block</button>
            <button class="btn btn-outline-primary m-2" @onclick="PreviewSection">Preview</button>
        </div>
    </div>
    @if (isExpanded)
    {
        @if (blocks.Count > 0)
        {
            @foreach (var block in blocks.OrderBy(x => x.OrderNo))
            {
                <div class="m-2 row">
                    <label class="h5 mt-2 pt-2">@block.OrderNo. @block.DisplayTitle</label>
                    <div class="col text-right">
                        <button class="btn btn-outline-primary m-2" @onclick="AddBlock">Edit Block</button>
                        <button class="btn btn-outline-primary m-2" @onclick="() => PreviewBlock(block.Id)">Preview</button>
                        <i class="fas fa-arrow-up m-2" @onclick="() => MoveUp(block)"></i>
                        <i class="fas fa-arrow-down m-2" @onclick="() => MoveDown(block)"></i>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="m-2 row">
                <label>No blocks yet...</label>
            </div>
        }
    }

</div>

@code {
    [Parameter]
    public SectionModel Section { get; set; }
    [Parameter]
    public int ProjectId { get; set; }

    private bool isExpanded = false;

    private List<IContentBlock> blocks;


    protected override async Task OnInitializedAsync()
    {
        var simpleQuizzes = await SimpleQuizData.GetSectionQuizzes(Section.Id);

        if (simpleQuizzes is not null)
        {
            foreach (var quiz in simpleQuizzes)
            {
                quiz.DisplayTitle = quiz.Question;
            }

            blocks = new List<IContentBlock>();
            blocks.AddRange(simpleQuizzes);
        }
    }

    private void AddBlock()
    {
        NavMan.NavigateTo($"/projects/{ProjectId}/{Section.Id}/{blocks.Count + 1}/add-new-block");
    }

    private void PreviewSection()
    {

    }

    private async Task MoveUp(IContentBlock block)
    {
        var blockOnTop = blocks.Where(x => x.OrderNo == block.OrderNo - 1).FirstOrDefault();

        if (blockOnTop is not null)
        {
            blockOnTop.OrderNo++;
            block.OrderNo--;
            await UpdateBlockOrderNo(blockOnTop);
            await UpdateBlockOrderNo(block);
        }
    }

    private async Task MoveDown(IContentBlock block)
    {
        var blockBelow = blocks.Where(x => x.OrderNo == block.OrderNo + 1).FirstOrDefault();

        if (blockBelow is not null)
        {
            blockBelow.OrderNo--;
            block.OrderNo++;
            await UpdateBlockOrderNo(blockBelow);
            await UpdateBlockOrderNo(block);
        }
    }

    private async Task UpdateBlockOrderNo(IContentBlock block)
    {
        if (block.GetType() == typeof(SimpleQuizModel))
        {
            await SimpleQuizData.UpdateQuizOrderNo((SimpleQuizModel) block);
        }
    }

    private void PreviewBlock(int blockId)
    {
        NavMan.NavigateTo($"/projects/{ProjectId}/{Section.Id}/{blockId}/{(int)Enums.BlockTypes.SimpleQuiz}/preview");
    }

    public void ExpandCollapse()
    {
        isExpanded = !isExpanded;
    }

}
