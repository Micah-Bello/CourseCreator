@inject NavigationManager NavMan
@inject SimpleQuizDataService SimpleQuizData
@inject MatchQuizDataService MatchQuizData
@inject VideoDataService VideoData
@inject ContentBlockDataService BlockData

<div class="m-2 p-2 shadow-sm">
    <div class="row" @onclick="ExpandCollapse">
        <label class="h4 m-2">@Section.Title</label>
        <div class="col text-right">
            <button class="btn btn-outline-primary m-2" @onclick="AddBlock">Add Block</button>
            <button class="btn btn-outline-primary m-2" @onclick="PreviewSection">Preview</button>
        </div>
    </div>
    @if (isExpanded)
    {
        @if (blocks.Where(b => b.OrderNo != 0).ToList().Count > 0)
        {
            @foreach (var block in blocks.Where(b => b.OrderNo != 0).OrderBy(x => x.OrderNo))
            {
                <div class="m-2 row">
                    <label class="h5 mt-2 pt-2">@block.DisplayTitle</label>
                    <div class="col text-right">
                        @switch (block.Type)
                        {
                            case Enums.BlockTypes.SimpleQuiz:
                                <label class="btn-info btn-sm px-2">Quiz</label>
                                break;
                            case Enums.BlockTypes.MatchQuiz:
                                <label class="btn-dark btn-sm px-2">Match Quiz</label>
                                break;
                            case Enums.BlockTypes.Video:
                                <label class="btn-warning btn-sm px-2">Video</label>
                                break;
                            default:
                                break;
                        }

                        <a href="javascript:;" class="hvr-icon-fade hvr-grow">
                            <i class="fas fa-pen hvr-icon m-2" @onclick="AddBlock"></i>
                        </a>
                        <a href="javascript:;" class="hvr-icon-fade hvr-grow">
                            <i class="fas fa-eye hvr-icon hvr-grow m-2" @onclick="() => PreviewBlock(block)"></i>
                        </a>
                        <a href="javascript:;" class="hvr-icon-fade hvr-grow">
                            <i class="fas fa-arrow-up hvr-icon m-2" @onclick="() => MoveUp(block)"></i>
                        </a>
                        <a href="javascript:;" class="hvr-icon-fade hvr-grow">
                            <i class="fas fa-arrow-down hvr-icon m-2" @onclick="() => MoveDown(block)"></i>
                        </a>
                        <a href="javascript:;" class="hvr-icon-fade hvr-grow">
                            <i class="fas fa-trash hvr-icon m-2" @onclick="() => DeleteBlock(block)"></i>
                        </a>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="m-2 row">
                <label>No blocks yet...</label>
            </div>
        }
    }

</div>

@code {
    [Parameter]
    public SectionModel Section { get; set; }
    [Parameter]
    public int ProjectId { get; set; }

    private bool isExpanded = false;

    private List<IContentBlock> blocks;


    protected override async Task OnInitializedAsync()
    {
        var simpleQuizzes = await SimpleQuizData.GetSectionQuizzes(Section.Id);

        var matchQuizzes = await MatchQuizData.GetSectionQuizzes(Section.Id);

        var videos = await VideoData.GetSectionVideos(Section.Id);

        blocks = new List<IContentBlock>();

        if (simpleQuizzes is not null)
        {
            foreach (var quiz in simpleQuizzes)
            {
                quiz.DisplayTitle = quiz.Question;
            }

            blocks.AddRange(simpleQuizzes);
        }

        if (matchQuizzes is not null)
        {
            foreach (var quiz in matchQuizzes)
            {
                quiz.DisplayTitle = quiz.Question;
            }

            blocks.AddRange(matchQuizzes);
        }

        if (videos is not null)
        {
            foreach (var video in videos)
            {
                video.DisplayTitle = video.Title;
            }

            blocks.AddRange(videos);
        }
    }

    private void AddBlock()
    {
        NavMan.NavigateTo($"/projects/{ProjectId}/{Section.Id}/{blocks.Count + 1}/add-new-block");
    }

    private async Task DeleteBlock(IContentBlock block)
    {
        var num = block.OrderNo;

        block.OrderNo = 0;

        await BlockData.UpdateOrderNo(new List<IContentBlock>() { block });

        await UpdateBlocksBelowDeleted(num);
    }

    private async Task UpdateBlocksBelowDeleted(int deletedBlockOrderNo)
    {
        var blocksToUpdate = blocks.Where(x => x.OrderNo > deletedBlockOrderNo).ToList();

        blocksToUpdate.ForEach(x => x.OrderNo--);

        await BlockData.UpdateOrderNo(blocksToUpdate);
    }

    private void PreviewSection()
    {

    }

    private async Task MoveUp(IContentBlock block)
    {
        var blockOnTop = blocks.Where(x => x.OrderNo == block.OrderNo - 1).FirstOrDefault();

        if (blockOnTop is not null)
        {
            blockOnTop.OrderNo++;
            block.OrderNo--;

            var blocksToUpdate = new List<IContentBlock>()
    {
                blockOnTop,
                block
            };

            await BlockData.UpdateOrderNo(blocksToUpdate);
        }
    }

    private async Task MoveDown(IContentBlock block)
    {
        var blockBelow = blocks.Where(x => x.OrderNo == block.OrderNo + 1).FirstOrDefault();

        if (blockBelow is not null)
        {
            blockBelow.OrderNo--;
            block.OrderNo++;

            var blocksToUpdate = new List<IContentBlock>()
    {
                blockBelow,
                block
            };

            await BlockData.UpdateOrderNo(blocksToUpdate);
        }
    }

    private void PreviewBlock(IContentBlock block)
    {
        NavMan.NavigateTo($"/projects/{ProjectId}/{Section.Id}/{block.Id}/{(int)block.Type}/preview");
    }

    public void ExpandCollapse()
    {
        isExpanded = !isExpanded;
    }

}
